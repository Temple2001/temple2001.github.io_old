{"componentChunkName":"component---src-templates-blog-post-js","path":"/개발/Arcade_Manger/","result":{"data":{"site":{"siteMetadata":{"title":"Temple's Hideout","author":"Temple","siteUrl":"https://temple2001.github.io","comment":{"disqusShortName":"","utterances":"Temple2001/temple2001.github.io"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"41fb23b6-4cef-531e-9c23-1a594030c68f","excerpt":"1. 제작 동기 나는 틈만 나면 친구들과 오락실에 가서 리듬게임을 플레이하곤 한다.   내가 자주 가는 오락실은 나처럼 리듬게임을 자주 플레이하는 사람들을 위해 오락실 전용 유튜브 채널을 개설하고, 몇몇 게임기에 방송 장비를 설치해 거의 2…","html":"<h2 id=\"1-제작-동기\" style=\"position:relative;\"><a href=\"#1-%EC%A0%9C%EC%9E%91-%EB%8F%99%EA%B8%B0\" aria-label=\"1 제작 동기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 제작 동기</h2>\n<p>나는 틈만 나면 친구들과 오락실에 가서 리듬게임을 플레이하곤 한다.  </p>\n<p>내가 자주 가는 오락실은 나처럼 리듬게임을 자주 플레이하는 사람들을 위해 오락실 전용 유튜브 채널을 개설하고, 몇몇 게임기에 방송 장비를 설치해 거의 24시간 내내 라이브 방송을 스트리밍 하여 자신의 플레이 모습을 다시 볼 수 있도록 하고 있다.\n</br></br></p>\n<p><img src=\"https://fastly.4sqi.net/img/general/1116x400/406903573_TTnIbMTaFuDf9irkZfBkF3Dso0MImU3jD5FwAmOGfew.jpg\"></p>\n<center><small><i>다양한 리듬게임이 모여있는 '노량진 어뮤즈타운'</i></small></center>\n</br>\n<p>나와 친구들도 이 유튜브 채널을 자주 사용하고 있는데, 문제점이 있다면 매일 갱신되는 수많은 라이브 방송 중에 자신이 플레이한 모습이 있는 영상을 찾는 것이 꽤 어렵다는 것이다.  </p>\n<p>매번 오락실을 갈 때마다 언제부터 플레이했는지 메모하는 방법도 어렵고, 해당 라이브 영상에 좋아요 표시를 해 자신의 유튜브 계정에 남겨놓는 방법도 몇시부터 플레이했는지는 저장되지 않기 때문에 여러모로 애로 사항이 많다.</p>\n<p>나는 이런 불편함을 어떻게 하면 해소할 수 있을지 계속 고민하고 있었고, 친구들끼리 많이 이용하는 메신저인 디스코드를 이용한 프로젝트를 하나 생각하게 되었다.  </p>\n<p>디스코드에 봇을 하나 만들고, 봇에게 내가 원하는 게임의 타임체크를 요청하면 봇은 그 게임에 해당하는 라이브 방송을 찾아 현재시간과 일치하는 그 라이브 영상의 재생시간을 영상의 정보와 함께 데이터베이스에 저장한다.  </p>\n<p>그리고 그 데이터베이스의 정보들을 정리하여 웹페이지에 보여주면 사용자들이 디스코드에 단순히 채팅을 친 것만으로 자신이 언제 오락실에서 게임을 했는지 기록할 수 있을 것이다.  </p>\n<p>또 오락실 영상을 한눈에 볼 수 있도록 모아주는 효과는 덤이다.</p>\n<h2 id=\"2-준비-과정\" style=\"position:relative;\"><a href=\"#2-%EC%A4%80%EB%B9%84-%EA%B3%BC%EC%A0%95\" aria-label=\"2 준비 과정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 준비 과정</h2>\n<p>&#x3C; 백엔드 ></p>\n<p>백엔드에서는 아래의 순서대로 작업이 이루어질 것이다.</p>\n<ol>\n<li>디스코드 봇이 사용자에게 요청을 받는다.</li>\n<li>요청받은 정보대로 Youtube Data API를 이용해 현재시간과 일치하는 영상의 재생시간과 기타 영상 정보들을 받아온다.</li>\n<li>받아온 정보를 DB에 저장한다.</li>\n<li>API 서버가 웹페이지에 사용될 DB의 정보들을 보낸다. (항상 진행중)</li>\n</ol>\n<hr>\n<p>따라서 아래와 같은 코드가 필요하다.</p>\n<ul>\n<li>디스코드 봇을 운영하는 코드</li>\n<li>Youtube Data API를 이용하는 코드</li>\n<li>DB에서 데이터를 읽고 쓰는 코드</li>\n<li>API 서버를 운영하는 코드</li>\n</ul>\n<hr>\n<p>디스코드를 다루는 부분은 discord.py가 이미 잘 만들어져 있어 이를 중심으로 만들 것이다.</p>\n<p>DB는 서비스에서 다룰 데이터들이 복잡하지 않기 때문에, 다루기 쉬운 NoSQL를 써도 괜찮을 것 같아 MongoDB를 사용할 것이다.</p>\n<p>API 서버는 Flask를 이용해서 만들 것이다.</p>\n<h2 id=\"3-코드-설명\" style=\"position:relative;\"><a href=\"#3-%EC%BD%94%EB%93%9C-%EC%84%A4%EB%AA%85\" aria-label=\"3 코드 설명 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 코드 설명</h2>\n<p><a href=\"https://github.com/Temple2001/arcade-manager\">깃허브 링크</a></p>\n<h2 id=\"4-후기\" style=\"position:relative;\"><a href=\"#4-%ED%9B%84%EA%B8%B0\" aria-label=\"4 후기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 후기</h2>","frontmatter":{"title":"Arcade Manager 제작기","date":"March 05, 2023"}}},"pageContext":{"slug":"/개발/Arcade_Manger/","previous":{"fields":{"slug":"/개발/원생_관리_프로그램/"},"frontmatter":{"title":"원생 관리 프로그램 제작기"}},"next":null}}}